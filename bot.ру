import os
import requests
import time
import telebot
from datetime import datetime

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
bot = telebot.TeleBot(TELEGRAM_TOKEN)

TOP_50_SYMBOLS = [
    "BTC_USDT", "ETH_USDT", "SOL_USDT", "BNB_USDT", "XRP_USDT", "DOGE_USDT",
    "TON_USDT", "ADA_USDT", "AVAX_USDT", "DOT_USDT", "TRX_USDT", "LINK_USDT",
    "MATIC_USDT", "SHIB_USDT", "ICP_USDT", "NEAR_USDT", "BCH_USDT", "LTC_USDT",
    "UNI_USDT", "PEPE_USDT", "DAI_USDT", "APT_USDT", "STX_USDT", "ETC_USDT",
    "LEO_USDT", "FDUSD_USDT", "XLM_USDT", "OKB_USDT", "FIL_USDT", "HBAR_USDT",
    "CRO_USDT", "VET_USDT", "RNDR_USDT", "MKR_USDT", "TAO_USDT", "WIF_USDT",
    "ARB_USDT", "GRT_USDT", "LDO_USDT", "EGLD_USDT", "FLOW_USDT", "SUI_USDT",
    "AAVE_USDT", "RUNE_USDT", "THETA_USDT", "INJ_USDT", "FET_USDT", "USDC_USDT",
    "DYDX_USDT", "TIA_USDT"
]

def get_bitmart_candles(symbol):
    url = f"https://api-cloud.bitmart.com/spot/v1/symbols/kline?symbol={symbol}&step=900&limit=50"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        return data['data']['klines']
    else:
        return None

def calculate_ema(data, period=20):
    prices = [float(candle[2]) for candle in data]  # Use close prices
    ema = []
    k = 2 / (period + 1)
    for i in range(len(prices)):
        if i < period - 1:
            ema.append(None)
        elif i == period - 1:
            ema.append(sum(prices[:period]) / period)
        else:
            ema.append(prices[i] * k + ema[i-1] * (1-k))
    return ema

def check_signal(symbol):
    candles = get_bitmart_candles(symbol)
    if not candles:
        return None

    close_prices = [float(candle[2]) for candle in candles]
    high_prices = [float(candle[3]) for candle in candles]
    low_prices = [float(candle[4]) for candle in candles]
    volumes = [float(candle[5]) for candle in candles]

    ema20 = calculate_ema(candles, 20)
    ema50 = calculate_ema(candles, 50)

    if not ema20[-1] or not ema50[-1]:
        return None

    last_close = close_prices[-1]
    last_volume = volumes[-1]
    avg_volume = sum(volumes[-4:-1]) / 3

    if last_volume < avg_volume:
        return None

    resistance = max(high_prices[-12:])
    support = min(low_prices[-12:])

    if last_close > resistance and ema20[-1] > ema50[-1]:
        return f"LONG {symbol.replace('_USDT','')}\nEntry: {last_close}\nStopLoss: {round(last_close*0.985,2)}\nTakeProfit: {round(last_close*1.03,2)}\nLeverage: 10x\nRisk: 1%"

    if last_close < support and ema20[-1] < ema50[-1]:
        return f"SHORT {symbol.replace('_USDT','')}\nEntry: {last_close}\nStopLoss: {round(last_close*1.015,2)}\nTakeProfit: {round(last_close*0.97,2)}\nLeverage: 10x\nRisk: 1%"

    return None

def main():
    bot.send_message(chat_id="@NewSignalGPT_bot", text="✅ Бот запущен! Отслеживаем монеты...")
    sent_signals = set()

    while True:
        for symbol in TOP_50_SYMBOLS:
            try:
                signal = check_signal(symbol)
                if signal and signal not in sent_signals:
                    bot.send_message(chat_id="@NewSignalGPT_bot", text=signal)
                    sent_signals.add(signal)
            except Exception as e:
                print(f"Ошибка обработки {symbol}: {e}")
        time.sleep(60)

if __name__ == "__main__":
    main()
